{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract CurveToken",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract CurvePool",
          "name": "_basePool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "p",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b50604051620010cb380380620010cb8339810160408190526200003491620000e8565b6040518060400160405280600d81526020016c26b2ba30902628102a37b5b2b760991b8152506040518060400160405280600381526020016204d4c560ec1b8152508160039081620000879190620001cc565b506004620000968282620001cc565b5050600580546001600160a01b039485166001600160a01b03199182161790915560068054939094169216919091179091555062000298565b6001600160a01b0381168114620000e557600080fd5b50565b60008060408385031215620000fc57600080fd5b82516200010981620000cf565b60208401519092506200011c81620000cf565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200015257607f821691505b6020821081036200017357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001c757600081815260208120601f850160051c81016020861015620001a25750805b601f850160051c820191505b81811015620001c357828155600101620001ae565b5050505b505050565b81516001600160401b03811115620001e857620001e862000127565b6200020081620001f984546200013d565b8462000179565b602080601f8311600181146200023857600084156200021f5750858301515b600019600386901b1c1916600185901b178555620001c3565b600085815260208120601f198616915b82811015620002695788860151825594840194600190910190840162000248565b5085821015620002885787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610e2380620002a86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c578063a0712d6811610066578063a0712d68146101a2578063a457c2d7146101b5578063a9059cbb146101c8578063dd62ed3e146101db57600080fd5b806342966c681461015c57806370a082311461017157806395d89b411461019a57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633950935114610149575b600080fd5b6100dc6101ee565b6040516100e99190610bd8565b60405180910390f35b610105610100366004610c42565b610280565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b610105610135366004610c6c565b61029a565b604051601281526020016100e9565b610105610157366004610c42565b6102be565b61016f61016a366004610ca8565b6102e0565b005b61011961017f366004610cc1565b6001600160a01b031660009081526020819052604090205490565b6100dc61048c565b61016f6101b0366004610ca8565b61049b565b6101056101c3366004610c42565b6105f8565b6101056101d6366004610c42565b610673565b6101196101e9366004610ce3565b610681565b6060600380546101fd90610d16565b80601f016020809104026020016040519081016040528092919081815260200182805461022990610d16565b80156102765780601f1061024b57610100808354040283529160200191610276565b820191906000526020600020905b81548152906001019060200180831161025957829003601f168201915b5050505050905090565b60003361028e8185856106ac565b60019150505b92915050565b6000336102a88582856107d1565b6102b385858561084b565b506001949350505050565b60003361028e8185856102d18383610681565b6102db9190610d66565b6106ac565b60065460408051630176f71760e71b815290516000926001600160a01b03169163bb7b8b809160048083019260209291908290030181865afa15801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190610d79565b61036083670de0b6b3a7640000610d92565b61036a9190610da9565b336000908152602081905260409020549091508211156103c85760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064015b60405180910390fd5b6103d233836109ef565b60055460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610423573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104479190610dcb565b6104885760405162461bcd60e51b815260206004820152601260248201527112d4081d1c985b9cd9995c8819985a5b195960721b60448201526064016103bf565b5050565b6060600480546101fd90610d16565b6000670de0b6b3a7640000600660009054906101000a90046001600160a01b03166001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190610d79565b6105279084610d92565b6105319190610da9565b6005546040516323b872dd60e01b8152336004820152306024820152604481018590529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad9190610dcb565b6105ee5760405162461bcd60e51b815260206004820152601260248201527112d4081d1c985b9cd9995c8819985a5b195960721b60448201526064016103bf565b6104883382610b19565b600033816106068286610681565b9050838110156106665760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103bf565b6102b382868684036106ac565b60003361028e81858561084b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03831661070e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103bf565b6001600160a01b03821661076f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103bf565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006107dd8484610681565b9050600019811461084557818110156108385760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103bf565b61084584848484036106ac565b50505050565b6001600160a01b0383166108af5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103bf565b6001600160a01b0382166109115760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103bf565b6001600160a01b038316600090815260208190526040902054818110156109895760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103bf565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610845565b6001600160a01b038216610a4f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103bf565b6001600160a01b03821660009081526020819052604090205481811015610ac35760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103bf565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016107c4565b6001600160a01b038216610b6f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103bf565b8060026000828254610b819190610d66565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600060208083528351808285015260005b81811015610c0557858101830151858201604001528201610be9565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610c3d57600080fd5b919050565b60008060408385031215610c5557600080fd5b610c5e83610c26565b946020939093013593505050565b600080600060608486031215610c8157600080fd5b610c8a84610c26565b9250610c9860208501610c26565b9150604084013590509250925092565b600060208284031215610cba57600080fd5b5035919050565b600060208284031215610cd357600080fd5b610cdc82610c26565b9392505050565b60008060408385031215610cf657600080fd5b610cff83610c26565b9150610d0d60208401610c26565b90509250929050565b600181811c90821680610d2a57607f821691505b602082108103610d4a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561029457610294610d50565b600060208284031215610d8b57600080fd5b5051919050565b808202811582820484141761029457610294610d50565b600082610dc657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610ddd57600080fd5b81518015158114610cdc57600080fdfea2646970667358221220a0401b073bc67211e1fd2fda5adc7b94537edfa530afb36b2f1ba4c613f658ee64736f6c63430008130033",
    "sourceMap": "142:917:27:-:0;;;292:177;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1980:113:20;;;;;;;;;;;;;-1:-1:-1;;;1980:113:20;;;;;;;;;;;;;;;;-1:-1:-1;;;1980:113:20;;;2054:5;2046;:13;;;;;;:::i;:::-;-1:-1:-1;2069:7:20;:17;2079:7;2069;:17;:::i;:::-;-1:-1:-1;;412:7:27::1;:18:::0;;-1:-1:-1;;;;;412:18:27;;::::1;-1:-1:-1::0;;;;;;412:18:27;;::::1;;::::0;;;441:8:::1;:20:::0;;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;142:917:27;;14:143:32;-1:-1:-1;;;;;101:31:32;;91:42;;81:70;;147:1;144;137:12;81:70;14:143;:::o;162:448::-;280:6;288;341:2;329:9;320:7;316:23;312:32;309:52;;;357:1;354;347:12;309:52;389:9;383:16;408:43;445:5;408:43;:::i;:::-;520:2;505:18;;499:25;470:5;;-1:-1:-1;533:45:32;499:25;533:45;:::i;:::-;597:7;587:17;;;162:448;;;;;:::o;615:127::-;676:10;671:3;667:20;664:1;657:31;707:4;704:1;697:15;731:4;728:1;721:15;747:380;826:1;822:12;;;;869;;;890:61;;944:4;936:6;932:17;922:27;;890:61;997:2;989:6;986:14;966:18;963:38;960:161;;1043:10;1038:3;1034:20;1031:1;1024:31;1078:4;1075:1;1068:15;1106:4;1103:1;1096:15;960:161;;747:380;;;:::o;1258:545::-;1360:2;1355:3;1352:11;1349:448;;;1396:1;1421:5;1417:2;1410:17;1466:4;1462:2;1452:19;1536:2;1524:10;1520:19;1517:1;1513:27;1507:4;1503:38;1572:4;1560:10;1557:20;1554:47;;;-1:-1:-1;1595:4:32;1554:47;1650:2;1645:3;1641:12;1638:1;1634:20;1628:4;1624:31;1614:41;;1705:82;1723:2;1716:5;1713:13;1705:82;;;1768:17;;;1749:1;1738:13;1705:82;;;1709:3;;;1349:448;1258:545;;;:::o;1979:1352::-;2099:10;;-1:-1:-1;;;;;2121:30:32;;2118:56;;;2154:18;;:::i;:::-;2183:97;2273:6;2233:38;2265:4;2259:11;2233:38;:::i;:::-;2227:4;2183:97;:::i;:::-;2335:4;;2399:2;2388:14;;2416:1;2411:663;;;;3118:1;3135:6;3132:89;;;-1:-1:-1;3187:19:32;;;3181:26;3132:89;-1:-1:-1;;1936:1:32;1932:11;;;1928:24;1924:29;1914:40;1960:1;1956:11;;;1911:57;3234:81;;2381:944;;2411:663;1205:1;1198:14;;;1242:4;1229:18;;-1:-1:-1;;2447:20:32;;;2565:236;2579:7;2576:1;2573:14;2565:236;;;2668:19;;;2662:26;2647:42;;2760:27;;;;2728:1;2716:14;;;;2595:19;;2565:236;;;2569:3;2829:6;2820:7;2817:19;2814:201;;;2890:19;;;2884:26;-1:-1:-1;;2973:1:32;2969:14;;;2985:3;2965:24;2961:37;2957:42;2942:58;2927:74;;2814:201;-1:-1:-1;;;;;3061:1:32;3045:14;;;3041:22;3028:36;;-1:-1:-1;1979:1352:32:o;:::-;142:917:27;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c578063a0712d6811610066578063a0712d68146101a2578063a457c2d7146101b5578063a9059cbb146101c8578063dd62ed3e146101db57600080fd5b806342966c681461015c57806370a082311461017157806395d89b411461019a57600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd14610127578063313ce5671461013a5780633950935114610149575b600080fd5b6100dc6101ee565b6040516100e99190610bd8565b60405180910390f35b610105610100366004610c42565b610280565b60405190151581526020016100e9565b6002545b6040519081526020016100e9565b610105610135366004610c6c565b61029a565b604051601281526020016100e9565b610105610157366004610c42565b6102be565b61016f61016a366004610ca8565b6102e0565b005b61011961017f366004610cc1565b6001600160a01b031660009081526020819052604090205490565b6100dc61048c565b61016f6101b0366004610ca8565b61049b565b6101056101c3366004610c42565b6105f8565b6101056101d6366004610c42565b610673565b6101196101e9366004610ce3565b610681565b6060600380546101fd90610d16565b80601f016020809104026020016040519081016040528092919081815260200182805461022990610d16565b80156102765780601f1061024b57610100808354040283529160200191610276565b820191906000526020600020905b81548152906001019060200180831161025957829003601f168201915b5050505050905090565b60003361028e8185856106ac565b60019150505b92915050565b6000336102a88582856107d1565b6102b385858561084b565b506001949350505050565b60003361028e8185856102d18383610681565b6102db9190610d66565b6106ac565b60065460408051630176f71760e71b815290516000926001600160a01b03169163bb7b8b809160048083019260209291908290030181865afa15801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190610d79565b61036083670de0b6b3a7640000610d92565b61036a9190610da9565b336000908152602081905260409020549091508211156103c85760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064015b60405180910390fd5b6103d233836109ef565b60055460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610423573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104479190610dcb565b6104885760405162461bcd60e51b815260206004820152601260248201527112d4081d1c985b9cd9995c8819985a5b195960721b60448201526064016103bf565b5050565b6060600480546101fd90610d16565b6000670de0b6b3a7640000600660009054906101000a90046001600160a01b03166001600160a01b031663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190610d79565b6105279084610d92565b6105319190610da9565b6005546040516323b872dd60e01b8152336004820152306024820152604481018590529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad9190610dcb565b6105ee5760405162461bcd60e51b815260206004820152601260248201527112d4081d1c985b9cd9995c8819985a5b195960721b60448201526064016103bf565b6104883382610b19565b600033816106068286610681565b9050838110156106665760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103bf565b6102b382868684036106ac565b60003361028e81858561084b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03831661070e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103bf565b6001600160a01b03821661076f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103bf565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006107dd8484610681565b9050600019811461084557818110156108385760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103bf565b61084584848484036106ac565b50505050565b6001600160a01b0383166108af5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103bf565b6001600160a01b0382166109115760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103bf565b6001600160a01b038316600090815260208190526040902054818110156109895760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103bf565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610845565b6001600160a01b038216610a4f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103bf565b6001600160a01b03821660009081526020819052604090205481811015610ac35760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103bf565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016107c4565b6001600160a01b038216610b6f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103bf565b8060026000828254610b819190610d66565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600060208083528351808285015260005b81811015610c0557858101830151858201604001528201610be9565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610c3d57600080fd5b919050565b60008060408385031215610c5557600080fd5b610c5e83610c26565b946020939093013593505050565b600080600060608486031215610c8157600080fd5b610c8a84610c26565b9250610c9860208501610c26565b9150604084013590509250925092565b600060208284031215610cba57600080fd5b5035919050565b600060208284031215610cd357600080fd5b610cdc82610c26565b9392505050565b60008060408385031215610cf657600080fd5b610cff83610c26565b9150610d0d60208401610c26565b90509250929050565b600181811c90821680610d2a57607f821691505b602082108103610d4a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561029457610294610d50565b600060208284031215610d8b57600080fd5b5051919050565b808202811582820484141761029457610294610d50565b600082610dc657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610ddd57600080fd5b81518015158114610cdc57600080fdfea2646970667358221220a0401b073bc67211e1fd2fda5adc7b94537edfa530afb36b2f1ba4c613f658ee64736f6c63430008130033",
    "sourceMap": "142:917:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2158:98:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4444:197;;;;;;:::i;:::-;;:::i;:::-;;;1169:14:32;;1162:22;1144:41;;1132:2;1117:18;4444:197:20;1004:187:32;3255:106:20;3342:12;;3255:106;;;1342:25:32;;;1330:2;1315:18;3255:106:20;1196:177:32;5203:256:20;;;;;;:::i;:::-;;:::i;3104:91::-;;;3186:2;1853:36:32;;1841:2;1826:18;3104:91:20;1711:184:32;5854:234:20;;;;;;:::i;:::-;;:::i;749:307:27:-;;;;;;:::i;:::-;;:::i;:::-;;3419:125:20;;;;;;:::i;:::-;-1:-1:-1;;;;;3519:18:20;3493:7;3519:18;;;;;;;;;;;;3419:125;2369:102;;;:::i;477:264:27:-;;;;;;:::i;:::-;;:::i;6575:427:20:-;;;;;;:::i;:::-;;:::i;3740:189::-;;;;;;:::i;:::-;;:::i;3987:149::-;;;;;;:::i;:::-;;:::i;2158:98::-;2212:13;2244:5;2237:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2158:98;:::o;4444:197::-;4527:4;719:10:23;4581:32:20;719:10:23;4597:7:20;4606:6;4581:8;:32::i;:::-;4630:4;4623:11;;;4444:197;;;;;:::o;5203:256::-;5300:4;719:10:23;5356:38:20;5372:4;719:10:23;5387:6:20;5356:15;:38::i;:::-;5404:27;5414:4;5420:2;5424:6;5404:9;:27::i;:::-;-1:-1:-1;5448:4:20;;5203:256;-1:-1:-1;;;;5203:256:20:o;5854:234::-;5942:4;719:10:23;5996:64:20;719:10:23;6012:7:20;6049:10;6021:25;719:10:23;6012:7:20;6021:9;:25::i;:::-;:38;;;;:::i;:::-;5996:8;:64::i;749:307:27:-;828:8;;:28;;;-1:-1:-1;;;828:28:27;;;;796:16;;-1:-1:-1;;;;;828:8:27;;:26;;:28;;;;;;;;;;;;;;:8;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;816:8;:1;820:4;816:8;:::i;:::-;815:41;;;;:::i;:::-;887:10;3493:7:20;3519:18;;;;;;;;;;;796:60:27;;-1:-1:-1;902:1:27;-1:-1:-1;877:26:27;869:59;;;;-1:-1:-1;;;869:59:27;;3974:2:32;869:59:27;;;3956:21:32;4013:2;3993:18;;;3986:30;-1:-1:-1;;;4032:18:32;;;4025:50;4092:18;;869:59:27;;;;;;;;;939:20;945:10;957:1;939:5;:20::i;:::-;986:7;;980:45;;-1:-1:-1;;;980:45:27;;1004:10;980:45;;;4295:51:32;4362:18;;;4355:34;;;-1:-1:-1;;;;;986:7:27;;;;980:23;;4268:18:32;;980:45:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;972:76;;;;-1:-1:-1;;;972:76:27;;4884:2:32;972:76:27;;;4866:21:32;4923:2;4903:18;;;4896:30;-1:-1:-1;;;4942:18:32;;;4935:48;5000:18;;972:76:27;4682:342:32;972:76:27;783:273;749:307;:::o;2369:102:20:-;2425:13;2457:7;2450:14;;;;;:::i;477:264:27:-;530:9;587:4;555:8;;;;;;;;;-1:-1:-1;;;;;555:8:27;-1:-1:-1;;;;;555:26:27;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;543:40;;:9;:40;:::i;:::-;542:49;;;;:::i;:::-;618:7;;612:65;;-1:-1:-1;;;612:65:27;;640:10;612:65;;;5269:34:32;660:4:27;5319:18:32;;;5312:43;5371:18;;;5364:34;;;530:61:27;;-1:-1:-1;;;;;;618:7:27;;612:27;;5204:18:32;;612:65:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;604:96;;;;-1:-1:-1;;;604:96:27;;4884:2:32;604:96:27;;;4866:21:32;4923:2;4903:18;;;4896:30;-1:-1:-1;;;4942:18:32;;;4935:48;5000:18;;604:96:27;4682:342:32;604:96:27;713:20;719:10;731:1;713:5;:20::i;6575:427:20:-;6668:4;719:10:23;6668:4:20;6749:25;719:10:23;6766:7:20;6749:9;:25::i;:::-;6722:52;;6812:15;6792:16;:35;;6784:85;;;;-1:-1:-1;;;6784:85:20;;5611:2:32;6784:85:20;;;5593:21:32;5650:2;5630:18;;;5623:30;5689:34;5669:18;;;5662:62;-1:-1:-1;;;5740:18:32;;;5733:35;5785:19;;6784:85:20;5409:401:32;6784:85:20;6903:60;6912:5;6919:7;6947:15;6928:16;:34;6903:8;:60::i;3740:189::-;3819:4;719:10:23;3873:28:20;719:10:23;3890:2:20;3894:6;3873:9;:28::i;3987:149::-;-1:-1:-1;;;;;4102:18:20;;;4076:7;4102:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3987:149::o;10457:340::-;-1:-1:-1;;;;;10558:19:20;;10550:68;;;;-1:-1:-1;;;10550:68:20;;6017:2:32;10550:68:20;;;5999:21:32;6056:2;6036:18;;;6029:30;6095:34;6075:18;;;6068:62;-1:-1:-1;;;6146:18:32;;;6139:34;6190:19;;10550:68:20;5815:400:32;10550:68:20;-1:-1:-1;;;;;10636:21:20;;10628:68;;;;-1:-1:-1;;;10628:68:20;;6422:2:32;10628:68:20;;;6404:21:32;6461:2;6441:18;;;6434:30;6500:34;6480:18;;;6473:62;-1:-1:-1;;;6551:18:32;;;6544:32;6593:19;;10628:68:20;6220:398:32;10628:68:20;-1:-1:-1;;;;;10707:18:20;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10758:32;;1342:25:32;;;10758:32:20;;1315:18:32;10758:32:20;;;;;;;;10457:340;;;:::o;11078:411::-;11178:24;11205:25;11215:5;11222:7;11205:9;:25::i;:::-;11178:52;;-1:-1:-1;;11244:16:20;:37;11240:243;;11325:6;11305:16;:26;;11297:68;;;;-1:-1:-1;;;11297:68:20;;6825:2:32;11297:68:20;;;6807:21:32;6864:2;6844:18;;;6837:30;6903:31;6883:18;;;6876:59;6952:18;;11297:68:20;6623:353:32;11297:68:20;11407:51;11416:5;11423:7;11451:6;11432:16;:25;11407:8;:51::i;:::-;11168:321;11078:411;;;:::o;7456:788::-;-1:-1:-1;;;;;7552:18:20;;7544:68;;;;-1:-1:-1;;;7544:68:20;;7183:2:32;7544:68:20;;;7165:21:32;7222:2;7202:18;;;7195:30;7261:34;7241:18;;;7234:62;-1:-1:-1;;;7312:18:32;;;7305:35;7357:19;;7544:68:20;6981:401:32;7544:68:20;-1:-1:-1;;;;;7630:16:20;;7622:64;;;;-1:-1:-1;;;7622:64:20;;7589:2:32;7622:64:20;;;7571:21:32;7628:2;7608:18;;;7601:30;7667:34;7647:18;;;7640:62;-1:-1:-1;;;7718:18:32;;;7711:33;7761:19;;7622:64:20;7387:399:32;7622:64:20;-1:-1:-1;;;;;7768:15:20;;7746:19;7768:15;;;;;;;;;;;7801:21;;;;7793:72;;;;-1:-1:-1;;;7793:72:20;;7993:2:32;7793:72:20;;;7975:21:32;8032:2;8012:18;;;8005:30;8071:34;8051:18;;;8044:62;-1:-1:-1;;;8122:18:32;;;8115:36;8168:19;;7793:72:20;7791:402:32;7793:72:20;-1:-1:-1;;;;;7899:15:20;;;:9;:15;;;;;;;;;;;7917:20;;;7899:38;;8114:13;;;;;;;;;;:23;;;;;;8163:26;;1342:25:32;;;8114:13:20;;8163:26;;1315:18:32;8163:26:20;;;;;;;8200:37;9375:659;;-1:-1:-1;;;;;9458:21:20;;9450:67;;;;-1:-1:-1;;;9450:67:20;;8400:2:32;9450:67:20;;;8382:21:32;8439:2;8419:18;;;8412:30;8478:34;8458:18;;;8451:62;-1:-1:-1;;;8529:18:32;;;8522:31;8570:19;;9450:67:20;8198:397:32;9450:67:20;-1:-1:-1;;;;;9613:18:20;;9588:22;9613:18;;;;;;;;;;;9649:24;;;;9641:71;;;;-1:-1:-1;;;9641:71:20;;8802:2:32;9641:71:20;;;8784:21:32;8841:2;8821:18;;;8814:30;8880:34;8860:18;;;8853:62;-1:-1:-1;;;8931:18:32;;;8924:32;8973:19;;9641:71:20;8600:398:32;9641:71:20;-1:-1:-1;;;;;9746:18:20;;:9;:18;;;;;;;;;;;9767:23;;;9746:44;;9883:12;:22;;;;;;;9931:37;1342:25:32;;;9746:9:20;;:18;9931:37;;1315:18:32;9931:37:20;1196:177:32;8520:535:20;-1:-1:-1;;;;;8603:21:20;;8595:65;;;;-1:-1:-1;;;8595:65:20;;9205:2:32;8595:65:20;;;9187:21:32;9244:2;9224:18;;;9217:30;9283:33;9263:18;;;9256:61;9334:18;;8595:65:20;9003:355:32;8595:65:20;8747:6;8731:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8899:18:20;;:9;:18;;;;;;;;;;;:28;;;;;;8952:37;1342:25:32;;;8952:37:20;;1315:18:32;8952:37:20;;;;;;;783:273:27;749:307;:::o;14:548:32:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:173::-;635:20;;-1:-1:-1;;;;;684:31:32;;674:42;;664:70;;730:1;727;720:12;664:70;567:173;;;:::o;745:254::-;813:6;821;874:2;862:9;853:7;849:23;845:32;842:52;;;890:1;887;880:12;842:52;913:29;932:9;913:29;:::i;:::-;903:39;989:2;974:18;;;;961:32;;-1:-1:-1;;;745:254:32:o;1378:328::-;1455:6;1463;1471;1524:2;1512:9;1503:7;1499:23;1495:32;1492:52;;;1540:1;1537;1530:12;1492:52;1563:29;1582:9;1563:29;:::i;:::-;1553:39;;1611:38;1645:2;1634:9;1630:18;1611:38;:::i;:::-;1601:48;;1696:2;1685:9;1681:18;1668:32;1658:42;;1378:328;;;;;:::o;1900:180::-;1959:6;2012:2;2000:9;1991:7;1987:23;1983:32;1980:52;;;2028:1;2025;2018:12;1980:52;-1:-1:-1;2051:23:32;;1900:180;-1:-1:-1;1900:180:32:o;2085:186::-;2144:6;2197:2;2185:9;2176:7;2172:23;2168:32;2165:52;;;2213:1;2210;2203:12;2165:52;2236:29;2255:9;2236:29;:::i;:::-;2226:39;2085:186;-1:-1:-1;;;2085:186:32:o;2276:260::-;2344:6;2352;2405:2;2393:9;2384:7;2380:23;2376:32;2373:52;;;2421:1;2418;2411:12;2373:52;2444:29;2463:9;2444:29;:::i;:::-;2434:39;;2492:38;2526:2;2515:9;2511:18;2492:38;:::i;:::-;2482:48;;2276:260;;;;;:::o;2541:380::-;2620:1;2616:12;;;;2663;;;2684:61;;2738:4;2730:6;2726:17;2716:27;;2684:61;2791:2;2783:6;2780:14;2760:18;2757:38;2754:161;;2837:10;2832:3;2828:20;2825:1;2818:31;2872:4;2869:1;2862:15;2900:4;2897:1;2890:15;2754:161;;2541:380;;;:::o;2926:127::-;2987:10;2982:3;2978:20;2975:1;2968:31;3018:4;3015:1;3008:15;3042:4;3039:1;3032:15;3058:125;3123:9;;;3144:10;;;3141:36;;;3157:18;;:::i;3188:184::-;3258:6;3311:2;3299:9;3290:7;3286:23;3282:32;3279:52;;;3327:1;3324;3317:12;3279:52;-1:-1:-1;3350:16:32;;3188:184;-1:-1:-1;3188:184:32:o;3377:168::-;3450:9;;;3481;;3498:15;;;3492:22;;3478:37;3468:71;;3519:18;;:::i;3550:217::-;3590:1;3616;3606:132;;3660:10;3655:3;3651:20;3648:1;3641:31;3695:4;3692:1;3685:15;3723:4;3720:1;3713:15;3606:132;-1:-1:-1;3752:9:32;;3550:217::o;4400:277::-;4467:6;4520:2;4508:9;4499:7;4495:23;4491:32;4488:52;;;4536:1;4533;4526:12;4488:52;4568:9;4562:16;4621:5;4614:13;4607:21;4600:5;4597:32;4587:60;;4643:1;4640;4633:12",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "increaseAllowance(address,uint256)": "39509351",
    "mint(uint256)": "a0712d68",
    "name()": "06fdde03",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract CurveToken\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract CurvePool\",\"name\":\"_basePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MetaPoolToken.sol\":\"MetaPoolToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15\",\"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"src/CurvePool.sol\":{\"keccak256\":\"0x80a210b56d95afdbb0bdd0b7775d94f369fa4aa6fa91012e97ffd8788cc3744f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://600cc10c6e5a3e22551b5091072e16ad78de2b7063875f1e4eb153037189dbd9\",\"dweb:/ipfs/QmVa3CZuiHy87rwFr4QYnPDtpiSQzfnRLfk2SF91Gcfam7\"]},\"src/CurveToken.sol\":{\"keccak256\":\"0x79b6bd68f3f1d2f3a8426a4e67dfbb394ab1fea2300304563706d1d79dff1d9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e815f34978bf1e9689ee5605dbe03adb13d36e2905152ece7617580c50622e5a\",\"dweb:/ipfs/QmRULDxDom6oqafj1BSgbUHdw2NTw7nxEiQAvcsoAML82W\"]},\"src/MetaPoolToken.sol\":{\"keccak256\":\"0xe9d26be8ae95fc43a438903f081ecbd85f6e3d7c418235e103a4dbbc7f1255cc\",\"urls\":[\"bzz-raw://e300749dce4ce3d44895a4f05e118282336c5ae446d540e5ff0e5611645b5ab3\",\"dweb:/ipfs/QmPgSAwSNt53HCYSRNoa5fsBeqqefrRPFMguNQ4iqv8kCB\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract CurveToken",
              "name": "_lpToken",
              "type": "address"
            },
            {
              "internalType": "contract CurvePool",
              "name": "_basePool",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "p",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_lpAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mint"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/MetaPoolToken.sol": "MetaPoolToken"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
        "keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
        "urls": [
          "bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
          "dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "keccak256": "0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c",
        "urls": [
          "bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15",
          "dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "urls": [
          "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
          "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "src/CurvePool.sol": {
        "keccak256": "0x80a210b56d95afdbb0bdd0b7775d94f369fa4aa6fa91012e97ffd8788cc3744f",
        "urls": [
          "bzz-raw://600cc10c6e5a3e22551b5091072e16ad78de2b7063875f1e4eb153037189dbd9",
          "dweb:/ipfs/QmVa3CZuiHy87rwFr4QYnPDtpiSQzfnRLfk2SF91Gcfam7"
        ],
        "license": "MIT"
      },
      "src/CurveToken.sol": {
        "keccak256": "0x79b6bd68f3f1d2f3a8426a4e67dfbb394ab1fea2300304563706d1d79dff1d9b",
        "urls": [
          "bzz-raw://e815f34978bf1e9689ee5605dbe03adb13d36e2905152ece7617580c50622e5a",
          "dweb:/ipfs/QmRULDxDom6oqafj1BSgbUHdw2NTw7nxEiQAvcsoAML82W"
        ],
        "license": "MIT"
      },
      "src/MetaPoolToken.sol": {
        "keccak256": "0xe9d26be8ae95fc43a438903f081ecbd85f6e3d7c418235e103a4dbbc7f1255cc",
        "urls": [
          "bzz-raw://e300749dce4ce3d44895a4f05e118282336c5ae446d540e5ff0e5611645b5ab3",
          "dweb:/ipfs/QmPgSAwSNt53HCYSRNoa5fsBeqqefrRPFMguNQ4iqv8kCB"
        ],
        "license": null
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/MetaPoolToken.sol",
    "id": 45885,
    "exportedSymbols": {
      "Context": [
        43668
      ],
      "CurvePool": [
        45611
      ],
      "CurveToken": [
        45764
      ],
      "ERC20": [
        43543
      ],
      "IERC20": [
        43621
      ],
      "IERC20Metadata": [
        43646
      ],
      "MetaPoolToken": [
        45884
      ],
      "ReentrancyGuard": [
        42956
      ]
    },
    "nodeType": "SourceUnit",
    "src": "0:1061:27",
    "nodes": [
      {
        "id": 45766,
        "nodeType": "PragmaDirective",
        "src": "0:23:27",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 45767,
        "nodeType": "ImportDirective",
        "src": "27:54:27",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-contracts/token/ERC20/ERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 45885,
        "sourceUnit": 43544,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 45768,
        "nodeType": "ImportDirective",
        "src": "83:25:27",
        "nodes": [],
        "absolutePath": "src/CurvePool.sol",
        "file": "./CurvePool.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 45885,
        "sourceUnit": 45612,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 45769,
        "nodeType": "ImportDirective",
        "src": "110:26:27",
        "nodes": [],
        "absolutePath": "src/CurveToken.sol",
        "file": "./CurveToken.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 45885,
        "sourceUnit": 45765,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 45884,
        "nodeType": "ContractDefinition",
        "src": "142:917:27",
        "nodes": [
          {
            "id": 45774,
            "nodeType": "VariableDeclaration",
            "src": "181:18:27",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "lpToken",
            "nameLocation": "192:7:27",
            "scope": 45884,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_CurveToken_$45764",
              "typeString": "contract CurveToken"
            },
            "typeName": {
              "id": 45773,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 45772,
                "name": "CurveToken",
                "nameLocations": [
                  "181:10:27"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 45764,
                "src": "181:10:27"
              },
              "referencedDeclaration": 45764,
              "src": "181:10:27",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CurveToken_$45764",
                "typeString": "contract CurveToken"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 45777,
            "nodeType": "VariableDeclaration",
            "src": "229:18:27",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "basePool",
            "nameLocation": "239:8:27",
            "scope": 45884,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_CurvePool_$45611",
              "typeString": "contract CurvePool"
            },
            "typeName": {
              "id": 45776,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 45775,
                "name": "CurvePool",
                "nameLocations": [
                  "229:9:27"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 45611,
                "src": "229:9:27"
              },
              "referencedDeclaration": 45611,
              "src": "229:9:27",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_CurvePool_$45611",
                "typeString": "contract CurvePool"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 45799,
            "nodeType": "FunctionDefinition",
            "src": "292:177:27",
            "nodes": [],
            "body": {
              "id": 45798,
              "nodeType": "Block",
              "src": "401:68:27",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 45792,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 45790,
                      "name": "lpToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 45774,
                      "src": "412:7:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CurveToken_$45764",
                        "typeString": "contract CurveToken"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 45791,
                      "name": "_lpToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 45780,
                      "src": "422:8:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CurveToken_$45764",
                        "typeString": "contract CurveToken"
                      }
                    },
                    "src": "412:18:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CurveToken_$45764",
                      "typeString": "contract CurveToken"
                    }
                  },
                  "id": 45793,
                  "nodeType": "ExpressionStatement",
                  "src": "412:18:27"
                },
                {
                  "expression": {
                    "id": 45796,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 45794,
                      "name": "basePool",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 45777,
                      "src": "441:8:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CurvePool_$45611",
                        "typeString": "contract CurvePool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 45795,
                      "name": "_basePool",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 45783,
                      "src": "452:9:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_CurvePool_$45611",
                        "typeString": "contract CurvePool"
                      }
                    },
                    "src": "441:20:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CurvePool_$45611",
                      "typeString": "contract CurvePool"
                    }
                  },
                  "id": 45797,
                  "nodeType": "ExpressionStatement",
                  "src": "441:20:27"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "4d657461204c5020546f6b656e",
                    "id": 45786,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "377:15:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_03bc008a5a9cd2ef9b1c49491f1d104b4201dd3b61f01f3c82823f820512d4a4",
                      "typeString": "literal_string \"Meta LP Token\""
                    },
                    "value": "Meta LP Token"
                  },
                  {
                    "hexValue": "4d4c50",
                    "id": 45787,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "394:5:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_0b06025e83bb4e26ea83c2ddc317ed2815c6101b072eaafd1ac6bbbd4a232114",
                      "typeString": "literal_string \"MLP\""
                    },
                    "value": "MLP"
                  }
                ],
                "id": 45788,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 45785,
                  "name": "ERC20",
                  "nameLocations": [
                    "371:5:27"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 43543,
                  "src": "371:5:27"
                },
                "nodeType": "ModifierInvocation",
                "src": "371:29:27"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 45784,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 45780,
                  "mutability": "mutable",
                  "name": "_lpToken",
                  "nameLocation": "325:8:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 45799,
                  "src": "314:19:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_CurveToken_$45764",
                    "typeString": "contract CurveToken"
                  },
                  "typeName": {
                    "id": 45779,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 45778,
                      "name": "CurveToken",
                      "nameLocations": [
                        "314:10:27"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 45764,
                      "src": "314:10:27"
                    },
                    "referencedDeclaration": 45764,
                    "src": "314:10:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CurveToken_$45764",
                      "typeString": "contract CurveToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 45783,
                  "mutability": "mutable",
                  "name": "_basePool",
                  "nameLocation": "354:9:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 45799,
                  "src": "344:19:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_CurvePool_$45611",
                    "typeString": "contract CurvePool"
                  },
                  "typeName": {
                    "id": 45782,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 45781,
                      "name": "CurvePool",
                      "nameLocations": [
                        "344:9:27"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 45611,
                      "src": "344:9:27"
                    },
                    "referencedDeclaration": 45611,
                    "src": "344:9:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_CurvePool_$45611",
                      "typeString": "contract CurvePool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "303:67:27"
            },
            "returnParameters": {
              "id": 45789,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "401:0:27"
            },
            "scope": 45884,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 45838,
            "nodeType": "FunctionDefinition",
            "src": "477:264:27",
            "nodes": [],
            "body": {
              "id": 45837,
              "nodeType": "Block",
              "src": "519:222:27",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    45805
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 45805,
                      "mutability": "mutable",
                      "name": "p",
                      "nameLocation": "538:1:27",
                      "nodeType": "VariableDeclaration",
                      "scope": 45837,
                      "src": "530:9:27",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 45804,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "530:7:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 45814,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 45813,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 45810,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 45806,
                            "name": "_lpAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 45801,
                            "src": "543:9:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 45807,
                                "name": "basePool",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 45777,
                                "src": "555:8:27",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_CurvePool_$45611",
                                  "typeString": "contract CurvePool"
                                }
                              },
                              "id": 45808,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "564:17:27",
                              "memberName": "get_virtual_price",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 43995,
                              "src": "555:26:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                                "typeString": "function () view external returns (uint256)"
                              }
                            },
                            "id": 45809,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "555:28:27",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "543:40:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 45811,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "542:42:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "hexValue": "31653138",
                      "id": 45812,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "587:4:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000000000000000_by_1",
                        "typeString": "int_const 1000000000000000000"
                      },
                      "value": "1e18"
                    },
                    "src": "542:49:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "530:61:27"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 45820,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "640:3:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 45821,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "644:6:27",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "640:10:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 45824,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "660:4:27",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_MetaPoolToken_$45884",
                                  "typeString": "contract MetaPoolToken"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_MetaPoolToken_$45884",
                                  "typeString": "contract MetaPoolToken"
                                }
                              ],
                              "id": 45823,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "652:7:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 45822,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "652:7:27",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 45825,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "652:13:27",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 45826,
                            "name": "_lpAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 45801,
                            "src": "667:9:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 45817,
                                "name": "lpToken",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 45774,
                                "src": "618:7:27",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_CurveToken_$45764",
                                  "typeString": "contract CurveToken"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_CurveToken_$45764",
                                  "typeString": "contract CurveToken"
                                }
                              ],
                              "id": 45816,
                              "name": "ERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 43543,
                              "src": "612:5:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC20_$43543_$",
                                "typeString": "type(contract ERC20)"
                              }
                            },
                            "id": 45818,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "612:14:27",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$43543",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 45819,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "627:12:27",
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 43156,
                          "src": "612:27:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 45827,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "612:65:27",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4b50207472616e73666572206661696c6564",
                        "id": 45828,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "679:20:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_701cb3b4c6c97390c4e6d457578845215db843eedc6e38eba06dd079cf0b9f6e",
                          "typeString": "literal_string \"KP transfer failed\""
                        },
                        "value": "KP transfer failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_701cb3b4c6c97390c4e6d457578845215db843eedc6e38eba06dd079cf0b9f6e",
                          "typeString": "literal_string \"KP transfer failed\""
                        }
                      ],
                      "id": 45815,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "604:7:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 45829,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "604:96:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 45830,
                  "nodeType": "ExpressionStatement",
                  "src": "604:96:27"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 45832,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "719:3:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 45833,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "723:6:27",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "719:10:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 45834,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 45805,
                        "src": "731:1:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 45831,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 43360,
                      "src": "713:5:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 45835,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "713:20:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 45836,
                  "nodeType": "ExpressionStatement",
                  "src": "713:20:27"
                }
              ]
            },
            "functionSelector": "a0712d68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nameLocation": "486:4:27",
            "parameters": {
              "id": 45802,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 45801,
                  "mutability": "mutable",
                  "name": "_lpAmount",
                  "nameLocation": "499:9:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 45838,
                  "src": "491:17:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 45800,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "491:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "490:19:27"
            },
            "returnParameters": {
              "id": 45803,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "519:0:27"
            },
            "scope": 45884,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 45883,
            "nodeType": "FunctionDefinition",
            "src": "749:307:27",
            "nodes": [],
            "body": {
              "id": 45882,
              "nodeType": "Block",
              "src": "783:273:27",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    45844
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 45844,
                      "mutability": "mutable",
                      "name": "lpAmount",
                      "nameLocation": "804:8:27",
                      "nodeType": "VariableDeclaration",
                      "scope": 45882,
                      "src": "796:16:27",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 45843,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "796:7:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 45853,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 45852,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 45847,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 45845,
                            "name": "p",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 45840,
                            "src": "816:1:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "31653138",
                            "id": 45846,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "820:4:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            },
                            "value": "1e18"
                          },
                          "src": "816:8:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 45848,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "815:10:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "expression": {
                          "id": 45849,
                          "name": "basePool",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 45777,
                          "src": "828:8:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_CurvePool_$45611",
                            "typeString": "contract CurvePool"
                          }
                        },
                        "id": 45850,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "837:17:27",
                        "memberName": "get_virtual_price",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 43995,
                        "src": "828:26:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                          "typeString": "function () view external returns (uint256)"
                        }
                      },
                      "id": 45851,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "828:28:27",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "815:41:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "796:60:27"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 45860,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 45856,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "887:3:27",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 45857,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "891:6:27",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "887:10:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 45855,
                            "name": "balanceOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 43055,
                            "src": "877:9:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view returns (uint256)"
                            }
                          },
                          "id": 45858,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "877:21:27",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 45859,
                          "name": "p",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 45840,
                          "src": "902:1:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "877:26:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e73756666696369656e742062616c616e6365",
                        "id": 45861,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "905:22:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        },
                        "value": "Insufficient balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        }
                      ],
                      "id": 45854,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "869:7:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 45862,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "869:59:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 45863,
                  "nodeType": "ExpressionStatement",
                  "src": "869:59:27"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 45865,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "945:3:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 45866,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "949:6:27",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "945:10:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 45867,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 45840,
                        "src": "957:1:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 45864,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 43432,
                      "src": "939:5:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 45868,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "939:20:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 45869,
                  "nodeType": "ExpressionStatement",
                  "src": "939:20:27"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 45875,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "1004:3:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 45876,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1008:6:27",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "1004:10:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 45877,
                            "name": "lpAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 45844,
                            "src": "1016:8:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 45872,
                                "name": "lpToken",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 45774,
                                "src": "986:7:27",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_CurveToken_$45764",
                                  "typeString": "contract CurveToken"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_CurveToken_$45764",
                                  "typeString": "contract CurveToken"
                                }
                              ],
                              "id": 45871,
                              "name": "ERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 43543,
                              "src": "980:5:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ERC20_$43543_$",
                                "typeString": "type(contract ERC20)"
                              }
                            },
                            "id": 45873,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "980:14:27",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$43543",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 45874,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "995:8:27",
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 43080,
                          "src": "980:23:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 45878,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "980:45:27",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4b50207472616e73666572206661696c6564",
                        "id": 45879,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1027:20:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_701cb3b4c6c97390c4e6d457578845215db843eedc6e38eba06dd079cf0b9f6e",
                          "typeString": "literal_string \"KP transfer failed\""
                        },
                        "value": "KP transfer failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_701cb3b4c6c97390c4e6d457578845215db843eedc6e38eba06dd079cf0b9f6e",
                          "typeString": "literal_string \"KP transfer failed\""
                        }
                      ],
                      "id": 45870,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "972:7:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 45880,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "972:76:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 45881,
                  "nodeType": "ExpressionStatement",
                  "src": "972:76:27"
                }
              ]
            },
            "functionSelector": "42966c68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "758:4:27",
            "parameters": {
              "id": 45841,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 45840,
                  "mutability": "mutable",
                  "name": "p",
                  "nameLocation": "771:1:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 45883,
                  "src": "763:9:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 45839,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "763:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "762:11:27"
            },
            "returnParameters": {
              "id": 45842,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "783:0:27"
            },
            "scope": 45884,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 45770,
              "name": "ERC20",
              "nameLocations": [
                "168:5:27"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 43543,
              "src": "168:5:27"
            },
            "id": 45771,
            "nodeType": "InheritanceSpecifier",
            "src": "168:5:27"
          }
        ],
        "canonicalName": "MetaPoolToken",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          45884,
          43543,
          43646,
          43621,
          43668
        ],
        "name": "MetaPoolToken",
        "nameLocation": "151:13:27",
        "scope": 45885,
        "usedErrors": []
      }
    ]
  },
  "id": 27
}